// This file was generated by counterfeiter
package softlayerfakes

import (
	"errors"
	"strings"
	"sync"

	datatypes "github.com/maximilien/softlayer-go/data_types"
	"github.com/maximilien/softlayer-go/softlayer"
)

type FakeSoftLayer_Product_Package_Service struct {
	GetNameStub        func() string
	getNameMutex       sync.RWMutex
	getNameArgsForCall []struct{}
	getNameReturns     struct {
		result1 string
	}
	getNameReturnsOnCall map[int]struct {
		result1 string
	}
	GetItemPricesStub        func(packageId int, filters string) ([]datatypes.SoftLayer_Product_Item_Price, error)
	getItemPricesMutex       sync.RWMutex
	getItemPricesArgsForCall []struct {
		packageId int
		filters   string
	}
	getItemPricesReturns struct {
		result1 []datatypes.SoftLayer_Product_Item_Price
		result2 error
	}
	getItemPricesReturnsOnCall map[int]struct {
		result1 []datatypes.SoftLayer_Product_Item_Price
		result2 error
	}
	GetItemsStub        func(packageId int, filters string) ([]datatypes.SoftLayer_Product_Item, error)
	getItemsMutex       sync.RWMutex
	getItemsArgsForCall []struct {
		packageId int
		filters   string
	}
	getItemsReturns struct {
		result1 []datatypes.SoftLayer_Product_Item
		result2 error
	}
	getItemsReturnsOnCall map[int]struct {
		result1 []datatypes.SoftLayer_Product_Item
		result2 error
	}
	GetItemsByTypeStub        func(packageType string) ([]datatypes.SoftLayer_Product_Item, error)
	getItemsByTypeMutex       sync.RWMutex
	getItemsByTypeArgsForCall []struct {
		packageType string
	}
	getItemsByTypeReturns struct {
		result1 []datatypes.SoftLayer_Product_Item
		result2 error
	}
	getItemsByTypeReturnsOnCall map[int]struct {
		result1 []datatypes.SoftLayer_Product_Item
		result2 error
	}
	GetPackagesByTypeStub        func(packageType string) ([]datatypes.Softlayer_Product_Package, error)
	getPackagesByTypeMutex       sync.RWMutex
	getPackagesByTypeArgsForCall []struct {
		packageType string
	}
	getPackagesByTypeReturns struct {
		result1 []datatypes.Softlayer_Product_Package
		result2 error
	}
	getPackagesByTypeReturnsOnCall map[int]struct {
		result1 []datatypes.Softlayer_Product_Package
		result2 error
	}
	GetOnePackageByTypeStub        func(packageType string) (datatypes.Softlayer_Product_Package, error)
	getOnePackageByTypeMutex       sync.RWMutex
	getOnePackageByTypeArgsForCall []struct {
		packageType string
	}
	getOnePackageByTypeReturns struct {
		result1 datatypes.Softlayer_Product_Package
		result2 error
	}
	getOnePackageByTypeReturnsOnCall map[int]struct {
		result1 datatypes.Softlayer_Product_Package
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSoftLayer_Product_Package_Service) GetName() string {
	fake.getNameMutex.Lock()
	ret, specificReturn := fake.getNameReturnsOnCall[len(fake.getNameArgsForCall)]
	fake.getNameArgsForCall = append(fake.getNameArgsForCall, struct{}{})
	fake.recordInvocation("GetName", []interface{}{})
	fake.getNameMutex.Unlock()
	if fake.GetNameStub != nil {
		return fake.GetNameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getNameReturns.result1
}

func (fake *FakeSoftLayer_Product_Package_Service) GetNameCallCount() int {
	fake.getNameMutex.RLock()
	defer fake.getNameMutex.RUnlock()
	return len(fake.getNameArgsForCall)
}

func (fake *FakeSoftLayer_Product_Package_Service) GetNameReturns(result1 string) {
	fake.GetNameStub = nil
	fake.getNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeSoftLayer_Product_Package_Service) GetNameReturnsOnCall(i int, result1 string) {
	fake.GetNameStub = nil
	if fake.getNameReturnsOnCall == nil {
		fake.getNameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getNameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeSoftLayer_Product_Package_Service) GetItemPrices(packageId int, filters string) ([]datatypes.SoftLayer_Product_Item_Price, error) {
	fake.getItemPricesMutex.Lock()
	ret, specificReturn := fake.getItemPricesReturnsOnCall[len(fake.getItemPricesArgsForCall)]
	fake.getItemPricesArgsForCall = append(fake.getItemPricesArgsForCall, struct {
		packageId int
		filters   string
	}{packageId, filters})
	fake.recordInvocation("GetItemPrices", []interface{}{packageId, filters})
	fake.getItemPricesMutex.Unlock()

	if strings.Contains(filters, "\"operation\":250") || strings.Contains(filters, "{\"operation\":500}") {
		return []datatypes.SoftLayer_Product_Item_Price{}, errors.New("The disk size should be 1000 when querying IOPS for 250G or 500G disks.")
	}

	if fake.GetItemPricesStub != nil {
		return fake.GetItemPricesStub(packageId, filters)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getItemPricesReturns.result1, fake.getItemPricesReturns.result2
}

func (fake *FakeSoftLayer_Product_Package_Service) GetItemPricesCallCount() int {
	fake.getItemPricesMutex.RLock()
	defer fake.getItemPricesMutex.RUnlock()
	return len(fake.getItemPricesArgsForCall)
}

func (fake *FakeSoftLayer_Product_Package_Service) GetItemPricesArgsForCall(i int) (int, string) {
	fake.getItemPricesMutex.RLock()
	defer fake.getItemPricesMutex.RUnlock()
	return fake.getItemPricesArgsForCall[i].packageId, fake.getItemPricesArgsForCall[i].filters
}

func (fake *FakeSoftLayer_Product_Package_Service) GetItemPricesReturns(result1 []datatypes.SoftLayer_Product_Item_Price, result2 error) {
	fake.GetItemPricesStub = nil
	fake.getItemPricesReturns = struct {
		result1 []datatypes.SoftLayer_Product_Item_Price
		result2 error
	}{result1, result2}
}

func (fake *FakeSoftLayer_Product_Package_Service) GetItemPricesReturnsOnCall(i int, result1 []datatypes.SoftLayer_Product_Item_Price, result2 error) {
	fake.GetItemPricesStub = nil
	if fake.getItemPricesReturnsOnCall == nil {
		fake.getItemPricesReturnsOnCall = make(map[int]struct {
			result1 []datatypes.SoftLayer_Product_Item_Price
			result2 error
		})
	}
	fake.getItemPricesReturnsOnCall[i] = struct {
		result1 []datatypes.SoftLayer_Product_Item_Price
		result2 error
	}{result1, result2}
}

func (fake *FakeSoftLayer_Product_Package_Service) GetItems(packageId int, filters string) ([]datatypes.SoftLayer_Product_Item, error) {
	fake.getItemsMutex.Lock()
	ret, specificReturn := fake.getItemsReturnsOnCall[len(fake.getItemsArgsForCall)]
	fake.getItemsArgsForCall = append(fake.getItemsArgsForCall, struct {
		packageId int
		filters   string
	}{packageId, filters})
	fake.recordInvocation("GetItems", []interface{}{packageId, filters})
	fake.getItemsMutex.Unlock()
	if fake.GetItemsStub != nil {
		return fake.GetItemsStub(packageId, filters)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getItemsReturns.result1, fake.getItemsReturns.result2
}

func (fake *FakeSoftLayer_Product_Package_Service) GetItemsCallCount() int {
	fake.getItemsMutex.RLock()
	defer fake.getItemsMutex.RUnlock()
	return len(fake.getItemsArgsForCall)
}

func (fake *FakeSoftLayer_Product_Package_Service) GetItemsArgsForCall(i int) (int, string) {
	fake.getItemsMutex.RLock()
	defer fake.getItemsMutex.RUnlock()
	return fake.getItemsArgsForCall[i].packageId, fake.getItemsArgsForCall[i].filters
}

func (fake *FakeSoftLayer_Product_Package_Service) GetItemsReturns(result1 []datatypes.SoftLayer_Product_Item, result2 error) {
	fake.GetItemsStub = nil
	fake.getItemsReturns = struct {
		result1 []datatypes.SoftLayer_Product_Item
		result2 error
	}{result1, result2}
}

func (fake *FakeSoftLayer_Product_Package_Service) GetItemsReturnsOnCall(i int, result1 []datatypes.SoftLayer_Product_Item, result2 error) {
	fake.GetItemsStub = nil
	if fake.getItemsReturnsOnCall == nil {
		fake.getItemsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.SoftLayer_Product_Item
			result2 error
		})
	}
	fake.getItemsReturnsOnCall[i] = struct {
		result1 []datatypes.SoftLayer_Product_Item
		result2 error
	}{result1, result2}
}

func (fake *FakeSoftLayer_Product_Package_Service) GetItemsByType(packageType string) ([]datatypes.SoftLayer_Product_Item, error) {
	fake.getItemsByTypeMutex.Lock()
	ret, specificReturn := fake.getItemsByTypeReturnsOnCall[len(fake.getItemsByTypeArgsForCall)]
	fake.getItemsByTypeArgsForCall = append(fake.getItemsByTypeArgsForCall, struct {
		packageType string
	}{packageType})
	fake.recordInvocation("GetItemsByType", []interface{}{packageType})
	fake.getItemsByTypeMutex.Unlock()
	if fake.GetItemsByTypeStub != nil {
		return fake.GetItemsByTypeStub(packageType)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getItemsByTypeReturns.result1, fake.getItemsByTypeReturns.result2
}

func (fake *FakeSoftLayer_Product_Package_Service) GetItemsByTypeCallCount() int {
	fake.getItemsByTypeMutex.RLock()
	defer fake.getItemsByTypeMutex.RUnlock()
	return len(fake.getItemsByTypeArgsForCall)
}

func (fake *FakeSoftLayer_Product_Package_Service) GetItemsByTypeArgsForCall(i int) string {
	fake.getItemsByTypeMutex.RLock()
	defer fake.getItemsByTypeMutex.RUnlock()
	return fake.getItemsByTypeArgsForCall[i].packageType
}

func (fake *FakeSoftLayer_Product_Package_Service) GetItemsByTypeReturns(result1 []datatypes.SoftLayer_Product_Item, result2 error) {
	fake.GetItemsByTypeStub = nil
	fake.getItemsByTypeReturns = struct {
		result1 []datatypes.SoftLayer_Product_Item
		result2 error
	}{result1, result2}
}

func (fake *FakeSoftLayer_Product_Package_Service) GetItemsByTypeReturnsOnCall(i int, result1 []datatypes.SoftLayer_Product_Item, result2 error) {
	fake.GetItemsByTypeStub = nil
	if fake.getItemsByTypeReturnsOnCall == nil {
		fake.getItemsByTypeReturnsOnCall = make(map[int]struct {
			result1 []datatypes.SoftLayer_Product_Item
			result2 error
		})
	}
	fake.getItemsByTypeReturnsOnCall[i] = struct {
		result1 []datatypes.SoftLayer_Product_Item
		result2 error
	}{result1, result2}
}

func (fake *FakeSoftLayer_Product_Package_Service) GetPackagesByType(packageType string) ([]datatypes.Softlayer_Product_Package, error) {
	fake.getPackagesByTypeMutex.Lock()
	ret, specificReturn := fake.getPackagesByTypeReturnsOnCall[len(fake.getPackagesByTypeArgsForCall)]
	fake.getPackagesByTypeArgsForCall = append(fake.getPackagesByTypeArgsForCall, struct {
		packageType string
	}{packageType})
	fake.recordInvocation("GetPackagesByType", []interface{}{packageType})
	fake.getPackagesByTypeMutex.Unlock()
	if fake.GetPackagesByTypeStub != nil {
		return fake.GetPackagesByTypeStub(packageType)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getPackagesByTypeReturns.result1, fake.getPackagesByTypeReturns.result2
}

func (fake *FakeSoftLayer_Product_Package_Service) GetPackagesByTypeCallCount() int {
	fake.getPackagesByTypeMutex.RLock()
	defer fake.getPackagesByTypeMutex.RUnlock()
	return len(fake.getPackagesByTypeArgsForCall)
}

func (fake *FakeSoftLayer_Product_Package_Service) GetPackagesByTypeArgsForCall(i int) string {
	fake.getPackagesByTypeMutex.RLock()
	defer fake.getPackagesByTypeMutex.RUnlock()
	return fake.getPackagesByTypeArgsForCall[i].packageType
}

func (fake *FakeSoftLayer_Product_Package_Service) GetPackagesByTypeReturns(result1 []datatypes.Softlayer_Product_Package, result2 error) {
	fake.GetPackagesByTypeStub = nil
	fake.getPackagesByTypeReturns = struct {
		result1 []datatypes.Softlayer_Product_Package
		result2 error
	}{result1, result2}
}

func (fake *FakeSoftLayer_Product_Package_Service) GetPackagesByTypeReturnsOnCall(i int, result1 []datatypes.Softlayer_Product_Package, result2 error) {
	fake.GetPackagesByTypeStub = nil
	if fake.getPackagesByTypeReturnsOnCall == nil {
		fake.getPackagesByTypeReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Softlayer_Product_Package
			result2 error
		})
	}
	fake.getPackagesByTypeReturnsOnCall[i] = struct {
		result1 []datatypes.Softlayer_Product_Package
		result2 error
	}{result1, result2}
}

func (fake *FakeSoftLayer_Product_Package_Service) GetOnePackageByType(packageType string) (datatypes.Softlayer_Product_Package, error) {
	fake.getOnePackageByTypeMutex.Lock()
	ret, specificReturn := fake.getOnePackageByTypeReturnsOnCall[len(fake.getOnePackageByTypeArgsForCall)]
	fake.getOnePackageByTypeArgsForCall = append(fake.getOnePackageByTypeArgsForCall, struct {
		packageType string
	}{packageType})
	fake.recordInvocation("GetOnePackageByType", []interface{}{packageType})
	fake.getOnePackageByTypeMutex.Unlock()
	if fake.GetOnePackageByTypeStub != nil {
		return fake.GetOnePackageByTypeStub(packageType)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getOnePackageByTypeReturns.result1, fake.getOnePackageByTypeReturns.result2
}

func (fake *FakeSoftLayer_Product_Package_Service) GetOnePackageByTypeCallCount() int {
	fake.getOnePackageByTypeMutex.RLock()
	defer fake.getOnePackageByTypeMutex.RUnlock()
	return len(fake.getOnePackageByTypeArgsForCall)
}

func (fake *FakeSoftLayer_Product_Package_Service) GetOnePackageByTypeArgsForCall(i int) string {
	fake.getOnePackageByTypeMutex.RLock()
	defer fake.getOnePackageByTypeMutex.RUnlock()
	return fake.getOnePackageByTypeArgsForCall[i].packageType
}

func (fake *FakeSoftLayer_Product_Package_Service) GetOnePackageByTypeReturns(result1 datatypes.Softlayer_Product_Package, result2 error) {
	fake.GetOnePackageByTypeStub = nil
	fake.getOnePackageByTypeReturns = struct {
		result1 datatypes.Softlayer_Product_Package
		result2 error
	}{result1, result2}
}

func (fake *FakeSoftLayer_Product_Package_Service) GetOnePackageByTypeReturnsOnCall(i int, result1 datatypes.Softlayer_Product_Package, result2 error) {
	fake.GetOnePackageByTypeStub = nil
	if fake.getOnePackageByTypeReturnsOnCall == nil {
		fake.getOnePackageByTypeReturnsOnCall = make(map[int]struct {
			result1 datatypes.Softlayer_Product_Package
			result2 error
		})
	}
	fake.getOnePackageByTypeReturnsOnCall[i] = struct {
		result1 datatypes.Softlayer_Product_Package
		result2 error
	}{result1, result2}
}

func (fake *FakeSoftLayer_Product_Package_Service) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getNameMutex.RLock()
	defer fake.getNameMutex.RUnlock()
	fake.getItemPricesMutex.RLock()
	defer fake.getItemPricesMutex.RUnlock()
	fake.getItemsMutex.RLock()
	defer fake.getItemsMutex.RUnlock()
	fake.getItemsByTypeMutex.RLock()
	defer fake.getItemsByTypeMutex.RUnlock()
	fake.getPackagesByTypeMutex.RLock()
	defer fake.getPackagesByTypeMutex.RUnlock()
	fake.getOnePackageByTypeMutex.RLock()
	defer fake.getOnePackageByTypeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSoftLayer_Product_Package_Service) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ softlayer.SoftLayer_Product_Package_Service = new(FakeSoftLayer_Product_Package_Service)
